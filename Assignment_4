#include <iostream>
#include <string>
#include <vector>
#include <limits>
#include <algorithm>
#include <stdexcept>
#include <fstream>
#include <ctime>
#include <sstream>

class UniversitySystemException {};
class EnrollmentException : public UniversitySystemException {};
class GradeException : public UniversitySystemException {};
class PaymentException : public UniversitySystemException {};
class InvalidDataException : public UniversitySystemException {};
class CourseFullException : public EnrollmentException {};
class PrerequisitesNotMetException : public EnrollmentException {};
class EnrollmentDeadlineException : public EnrollmentException {};
class UnauthorizedGradeChangeException : public GradeException {};
class InvalidGradeEntryException : public GradeException {};
class FinalGradeChangeAttemptException : public GradeException {};
void logException(const std::exception& e) {}
class Person {
private:
    std::string name;
    int age;
    int id;
    std::string email;
public:
    Person(const std::string& name, int age, int id, const std::string& email) : name(name), age(age), id(id), email(email) {}
    virtual ~Person() {}
    std::string getName() const { return name; }
    int getAge() const { return age; }
    int getId() const { return id; }
    std::string getEmail() const { return email; }
    virtual void displayDetails() const {
        std::cout << "Name: " << name << ", Age: " << age << ", ID: " << id << ", Email: " << email;
    }
    virtual double calculatePayment() const { return 0.0; }
};
class Professor : public Person {
private:
    std::string department;
    std::string specialization;
    std::string hireDate;
    double salary;
public:
    Professor(const std::string& name, int age, int id, const std::string& email, const std::string& department, const std::string& specialization, const std::string& hireDate, double salary)
        : Person(name, age, id, email), department(department), specialization(specialization), hireDate(hireDate), salary(salary) {}
    std::string getDepartment() const { return department; }
    std::string getSpecialization() const { return specialization; }
    double getSalary() const { return salary; }
    virtual void displayDetails() const override {
        Person::displayDetails();
        std::cout << ", Department: " << department << ", Specialization: " << specialization << ", Hire Date: " << hireDate << ", Salary: $" << salary;
    }
};
class AssistantProfessor : public Professor {
private:
    int researchPapers;
    double researchGrant;
public:
    AssistantProfessor(const std::string& name, int age, int id, const std::string& email, const std::string& department, const std::string& specialization, const std::string& hireDate, double salary, int researchPapers, double researchGrant)
        : Professor(name, age, id, email, department, specialization, hireDate, salary), researchPapers(researchPapers), researchGrant(researchGrant) {}
    void displayDetails() const override {
        Professor::displayDetails();
        std::cout << ", Research Papers: " << researchPapers << ", Research Grant: $" << researchGrant;
    }
};
class AssociateProfessor : public Professor {
private:
    int publications;
    int yearsOfService;
public:
    AssociateProfessor(const std::string& name, int age, int id, const std::string& email, const std::string& department, const std::string& specialization, const std::string& hireDate, double salary, int publications, int yearsOfService)
        : Professor(name, age, id, email, department, specialization, hireDate, salary), publications(publications), yearsOfService(yearsOfService) {}
    void displayDetails() const override {
        Professor::displayDetails();
        std::cout << ", Publications: " << publications << ", Years of Service: " << yearsOfService;
    }
};
class FullProfessor : public Professor {
private:
    int doctoralStudentsSupervised;
    double endowmentFunds;
public:
    FullProfessor(const std::string& name, int age, int id, const std::string& email, const std::string& department, const std::string& specialization, const std::string& hireDate, double salary, int doctoralStudentsSupervised, double endowmentFunds)
        : Professor(name, age, id, email, department, specialization, hireDate, salary), doctoralStudentsSupervised(doctoralStudentsSupervised), endowmentFunds(endowmentFunds) {}
    void displayDetails() const override {
        Professor::displayDetails();
        std::cout << ", Doctoral Students Supervised: " << doctoralStudentsSupervised << ", Endowment Funds: $" << endowmentFunds;
    }
};
class Course {
private:
    std::string code;
    std::string title;
    int credits;
    std::string description;
    int maxCapacity;
    int currentEnrollment;
    Professor* instructor;
    std::vector<std::string> prerequisites;
public:
    Course(const std::string& code, const std::string& title, int credits, const std::string& description, int maxCapacity)
        : code(code), title(title), credits(credits), description(description), maxCapacity(maxCapacity), currentEnrollment(0), instructor(nullptr) {}
    ~Course() {}
    std::string getCode() const { return code; }
    std::string getTitle() const { return title; }
    int getCredits() const { return credits; }
    int getMaxCapacity() const { return maxCapacity; }
    int getCurrentEnrollment() const { return currentEnrollment; }
    Professor* getInstructor() const { return instructor; }
    std::vector<std::string> getPrerequisites() const { return prerequisites; }
    void setInstructor(Professor* prof) { instructor = prof; }
    void incrementEnrollment() { if (currentEnrollment < maxCapacity) currentEnrollment++; }
    void decrementEnrollment() { if (currentEnrollment > 0) currentEnrollment--; }
    void addPrerequisite(const std::string& prereq) { prerequisites.push_back(prereq); }
    void displayDetails() const {
        std::cout << "Code: " << code << ", Title: " << title << ", Credits: " << credits << ", Description: " << description
                  << ", Max Capacity: " << maxCapacity << ", Current Enrollment: " << currentEnrollment;
        if (instructor) {
            std::cout << ", Instructor: " << instructor->getName();
        } else {
            std::cout << ", Instructor: Not Assigned";
        }
        if (!prerequisites.empty()) {
            std::cout << ", Prerequisites: ";
            for (const auto& p : prerequisites) {
                std::cout << p << " ";
            }
        }
        std::cout << std::endl;
    }
};
class Student : public Person {
protected:
    std::string enrollmentDate;
    std::string major;
    double gpa;
    std::string advisor;
    std::vector<std::string> completedCourses;
    std::vector<std::string> enrolledCourses;
public:
    Student(const std::string& name, int age, int id, const std::string& email, const std::string& enrollmentDate, const std::string& major, double gpa, const std::string& advisor)
        : Person(name, age, id, email), enrollmentDate(enrollmentDate), major(major), gpa(gpa), advisor(advisor) {}
    virtual ~Student() {}
    std::string getEnrollmentDate() const { return enrollmentDate; }
    std::string getMajor() const { return major; }
    double getGpa() const { return gpa; }
    std::vector<std::string> getEnrolledCourses() const { return enrolledCourses; }
    void enrollInCourse(const std::string& courseCode) { enrolledCourses.push_back(courseCode); }
    bool hasCompletedCourse(const std::string& courseCode) const {
        return std::find(completedCourses.begin(), completedCourses.end(), courseCode) != completedCourses.end();
    }
    void addCompletedCourse(const std::string& courseCode) { completedCourses.push_back(courseCode); }
    virtual void displayDetails() const override {
        Person::displayDetails();
        std::cout << ", Enrollment Date: " << enrollmentDate << ", Major: " << major << ", GPA: " << gpa << ", Advisor: " << advisor;
        if (!enrolledCourses.empty()) {
            std::cout << ", Enrolled Courses: ";
            for (const auto& course : enrolledCourses) {
                std::cout << course << " ";
            }
        }
        if (!completedCourses.empty()) {
            std::cout << ", Completed Courses: ";
            for (const auto& course : completedCourses) {
                std::cout << course << " ";
            }
        }
        std::cout << std::endl;
    }
    virtual double calculatePayment() const override { return 0.0; }
};
class UndergraduateStudent : public Student {
private:
    std::string degreeProgram;
    std::string expectedGraduation;
public:
    UndergraduateStudent(const std::string& name, int age, int id, const std::string& email, const std::string& enrollmentDate, const std::string& major, double gpa, const std::string& advisor, const std::string& degreeProgram, const std::string& expectedGraduation)
        : Student(name, age, id, email, enrollmentDate, major, gpa, advisor), degreeProgram(degreeProgram), expectedGraduation(expectedGraduation) {}
    void displayDetails() const override {
        Student::displayDetails();
        std::cout << ", Degree Program: " << degreeProgram << ", Expected Graduation: " << expectedGraduation;
    }
    double calculatePayment() const override { return 5000.0; }
};
class GraduateStudent : public Student {
private:
    std::string thesisTopic;
    std::string researchArea;
public:
    GraduateStudent(const std::string& name, int age, int id, const std::string& email, const std::string& enrollmentDate, const std::string& major, double gpa, const std::string& advisor, const std::string& thesisTopic, const std::string& researchArea)
        : Student(name, age, id, email, enrollmentDate, major, gpa, advisor), thesisTopic(thesisTopic), researchArea(researchArea) {}
    void displayDetails() const override {
        Student::displayDetails();
        std::cout << ", Thesis Topic: " << thesisTopic << ", Research Area: " << researchArea;
    }
    double calculatePayment() const override { return 7000.0; }
};
class Department {
private:
    std::string name;
    std::string location;
    double budget;
public:
    Department(const std::string& name, const std::string& location, double budget) : name(name), location(location), budget(budget) {}
    std::string getName() const { return name; }
    void displayDetails() const {
        std::cout << "Name: " << name << ", Location: " << location << ", Budget: $" << budget << std::endl;
    }
};
class GradeBook {
private:
    std::string courseCode;
    std::map<int, double> grades;
public:
    GradeBook(const std::string& courseCode) : courseCode(courseCode) {}
    std::string getCourseCode() const { return courseCode; }
    void addGrade(int studentId, double grade) { grades[studentId] = grade; }
    double getGrade(int studentId) const {
        auto it = grades.find(studentId);
        return it != grades.end() ? it->second : -1.0;
    }
    void displayGrades() const {
        for (const auto& pair : grades) {
            std::cout << "Student ID: " << pair.first << ", Grade: " << pair.second << std::endl;
        }
    }
    double calculateAverageGrade() const {
        if (grades.empty()) return 0.0;
        double sum = 0;
        for (const auto& pair : grades) {
            sum += pair.second;
        }
        return sum / grades.size();
    }
    double getHighestGrade() const {
        if (grades.empty()) return 0.0;
        double highest = -1.0;
        for (const auto& pair : grades) {
            if (pair.second > highest) {
                highest = pair.second;
            }
        }
        return highest;
    }
    std::vector<int> getFailingStudents() const {
        std::vector<int> failing;
        for (const auto& pair : grades) {
            if (pair.second < 60.0) {
                failing.push_back(pair.first);
            }
        }
        return failing;
    }
};
class EnrollmentManager {
private:
    std::map<int, std::string> enrollments;
public:
    void enrollStudent(int studentId, const std::string& courseCode) {
        enrollments[studentId] = courseCode;
    }
    bool isStudentEnrolled(int studentId, const std::string& courseCode) const {
        auto it = enrollments.find(studentId);
        return it != enrollments.end() && it->second == courseCode;
    }
    const std::map<int, std::string>& getEnrollments() const {
        return enrollments;
    }
};
class University {};
class Schedule {};
class UniversitySystem {
private:
    std::vector<Department*> departments;
    std::vector<Course*> courses;
    std::vector<Student*> students;
    std::vector<Professor*> professors;
    EnrollmentManager enrollmentManager;
    std::vector<GradeBook> gradeBooks;
    std::string currentSemester;
public:
    UniversitySystem() : currentSemester("Fall 2025") {}
    ~UniversitySystem() {
        for (auto& dept : departments) delete dept;
        for (auto& course : courses) delete course;
        for (auto& student : students) delete student;
        for (auto& prof : professors) delete prof;
    }
    void createNewSemester(const std::string& semester) {
        currentSemester = semester;
        std::cout << "New semester created: " << currentSemester << std::endl;
    }
    void addDepartment(Department* department) {
        departments.push_back(department);
        std::cout << "Department '" << department->getName() << "' added." << std::endl;
    }
    void addCourse(Course* course) {
        courses.push_back(course);
        std::cout << "Course '" << course->getTitle() << "' added." << std::endl;
    }
    void addStudent(Student* student) {
        students.push_back(student);
        std::cout << "Student '" << student->getName() << "' added." << std::endl;
    }
    void addProfessor(Professor* professor) {
        professors.push_back(professor);
        std::cout << "Professor '" << professor->getName() << "' added." << std::endl;
    }
    Department* findDepartment(const std::string& name) {
        for (auto& dept : departments) {
            if (dept->getName() == name) return dept;
        }
        return nullptr;
    }
    Course* findCourse(const std::string& code) {
        for (auto& course : courses) {
            if (course->getCode() == code) return course;
        }
        return nullptr;
    }
    Student* findStudent(int id) {
        for (auto& student : students) {
            if (student->getId() == id) return student;
        }
        return nullptr;
    }
    Professor* findProfessor(int id) {
        for (auto& professor : professors) {
            if (professor->getId() == id) return professor;
        }
        return nullptr;
    }
    void enrollStudentInCourse(int studentId, const std::string& courseCode) {
        Student* student = findStudent(studentId);
        Course* course = findCourse(courseCode);
        if (!student) throw EnrollmentException("Student with ID " + std::to_string(studentId) + " not found.");
        if (!course) throw EnrollmentException("Course with code " + courseCode + " not found.");
        for (const auto& prereq : course->getPrerequisites()) {
            if (!student->hasCompletedCourse(prereq)) {
                throw PrerequisitesNotMetException("Student " + student->getName() + " does not meet prerequisites for " + course->getTitle() + " (" + prereq + ").");
            }
        }
        if (enrollmentManager.isStudentEnrolled(studentId, courseCode)) {
            throw EnrollmentException("Student " + student->getName() + " is already enrolled in " + course->getTitle() + ".");
        }
        if (course->getCurrentEnrollment() >= course->getMaxCapacity()) {
            throw CourseFullException("Course " + course->getTitle() + " (" + courseCode + ") is full.");
        }
        enrollmentManager.enrollStudent(studentId, courseCode);
        student->enrollInCourse(courseCode);
        course->
